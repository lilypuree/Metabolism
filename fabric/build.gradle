plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version "1.+"
}
base {
    archivesName = "${mod_name}-Fabric-${minecraft_version}"
}
repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.ryanliptak.com/" }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_mc_version}:${parchment_version}")
    }
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.2")))
    include(modImplementation "maven.modrinth:midnightlib:${midnightlib_version}")
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:12.0.613"
    modCompileOnly("squeek.appleskin:appleskin-fabric:${appleskin_fabric_version}:api") {
        transitive = false
    }
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

modrinth {
    debugMode = true
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${mod_id}" // This can be the project ID or the slug. Either will work!
    versionName = archivesBaseName + "-" + version
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar
    changelog = rootProject.file('CHANGELOG.md').text
    gameVersions = ["1.20.1"] // Must be an array, even with only one version
    dependencies { // A special DSL for creating dependencies
        required.project "fabric-api" // Creates a new required dependency on Fabric API
        embedded.project "midnightlib" // Creates a new required dependency on Fabric API
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    debugMode = true

    description = 'publishes the fabric build to CurseForge.'
    
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    
    def mainFile = upload(953740, jar)
    mainFile.changelog = rootProject.file('CHANGELOG.md')
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.addRequirement("fabric-api")
    mainFile.addEmbedded("midnightlib")
}